name: 빌드 및 배포

on:
  push:
    branches: [ main ]

# 옆으로 늘어나는 배열 [ ]
# 아래로 늘어나는 배열 -

env:
  USERNAME: jeong1230

# 변수명=값

# properties
# env
# ini

# 계층구조

# node1.group1.변수명1=값1
# node1.group1.변수명2=값2
# node1.group1.변수명3=값3
# node1.group2.변수명1=값1
# node1.group2.변수명2=값2
# node1.group2.변수명3=값3
# node1.group3.변수명1=값1
# node1.group3.변수명2=값2
# node1.group3.변수명3=값3

# node2.group1.변수명1=값1
# node2.group1.변수명2=값2
# node2.group1.변수명3=값3
# node2.group2.변수명1=값1
# node2.group2.변수명2=값2
# node2.group2.변수명3=값3
# node2.group3.변수명1=값1
# node2.group3.변수명2=값2
# node2.group3.변수명3=값3

# yml

# 레벨로 만들어준 것

# node1:
#   group1:
#     변수명1=값1
#     변수명2=값2
#     변수명3=값3
#   group2:
#     변수명1=값1
#     변수명2=값2
#     변수명3=값3

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: 원격저장소에서 소스를 복사
        uses: actions/checkout@v3
      
      - name: 소스파일을 docker이미지로 빌드한다
        run: docker build -t ${{env.USERNAME}}/my-fastapi-whoami:latest .

      - name: docker hub에 로그인을 한다
        run: docker login -u ${{env.USERNAME}} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: 생성된 이미지를 docker hub에 push한다
        run: docker push ${{env.USERNAME}}/my-fastapi-whoami:latest
  
  deploy:
    needs: build-docker-image
    name: deploy
    runs-on: [ self-hosted, label-kosa ]
    steps:
      - name: 기존에 실행 중인 서비스를 제거한다
        run: docker service rm my-fastapi-whoami-app
      
      - name: docker hub에 로그인을 한다
        run: docker login -u ${{env.USERNAME}} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: 생성된 이미지를 docker hub에서 pull로 내려 받는다
        run: docker pull ${{env.USERNAME}}/my-fastapi-whoami:latest
      
      - name: 서비스 실행
        run: |
          docker service create \
              --name my-fastapi-whoami-app \
              --publish published=8000,target=8000 \
              --replicas 3 \
              ${{env.USERNAME}}/my-fastapi-whoami:latest
